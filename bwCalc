#!/usr/bin/env python
'''
Base-by-base arithmetic involving bigwigs, e.g. ChIP divided by input

Usage: bwCalc [options] -e <expr> -o <bigwig_out> <bigwig>...

Options:
    -e <expr>        arithmetic expression, bigwigs are referred to as A,B,C,...
    -o <bigwig_out>  output bigwig
    <bigwig>         input bigwig(s)
'''

from __future__ import print_function
import sys
import signal
import logging
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
logging.basicConfig(
        level=logging.WARN,
        format='%(asctime)s; %(levelname)s; %(funcName)s; %(message)s',
        datefmt='%y-%m-%d %H:%M:%S')
import pyBigWig
import numpy as np
import numexpr
import string

alphabet = list(string.ascii_uppercase)
tol = 1e-16

def check_chroms(bigwigs):
    bwfhs = [pyBigWig.open(bw) for bw in bigwigs]
    chroms = bwfhs[0].chroms()
    n_error = 0
    for i,bwfh in enumerate(bwfhs):
        if not chroms == bwfh.chroms():
            n_error += 1
            logging.error('unmatched chroms in {}'.format(bigwigs[0]))
        bwfh.close()
    if n_error == 0:
        chroms = [(c,chroms[c]) for c in sorted(chroms)]
    else:
        chroms = None
    return chroms

def main(args):
    logging.info(args)

    expr = args['e']
    oBigwig = args['o']
    bigwigs = args['bigwig']
    chroms = check_chroms(bigwigs)
    assert chroms is not None, 'unmatched chroms found'

    bwfhs = [pyBigWig.open(bw) for bw in bigwigs]
    n = len(bwfhs)
    obwfh = pyBigWig.open(oBigwig, 'w')
    obwfh.addHeader(chroms)
    for c,l in chroms:
        bw_dict = {}
        for i,bwfh in enumerate(bwfhs):
            bw_dict[alphabet[i]] = bwfh.values(c, 0, l, numpy=True)
        z = numexpr.evaluate(expr, local_dict=bw_dict)
        z[np.logical_or(np.isnan(z), np.isinf(z))] = -1
        k = np.where(np.abs(np.diff(z))>tol)[0] + 1
        s = np.insert(k,0,0)
        e = np.append(k,len(z))
        v = z[e-1]
        u = (v != -1)
        obwfh.addEntries(np.array([c]*np.sum(u)), s[u], ends=e[u], values=v[u])
    obwfh.close()
    [bwfh.close() for bwfh in bwfhs]
    logging.info('Done')
    return 0

if __name__ == '__main__':
    from docopt import docopt
    args = docopt(__doc__)
    args = {k.lstrip('-<').rstrip('>'):args[k] for k in args}
    try:
        main(args)
    except KeyboardInterrupt:
        logging.warning('Interrupted')
        sys.exit(1)
