#!/usr/bin/env python
'''
Extract alignments from input SAM given a list of read names

Usage: getReadByName (-l <list>) [-eH] [<sam>]

Options:
    -l <list>   list of read names
    -x          exclude the list instead of including
    -H          output header where available
    <sam>       input, read from stdin if omitted
'''

from __future__ import print_function
import sys
import os.path
import signal
import logging
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s; %(levelname)s; %(funcName)s; %(message)s',
        datefmt='%y-%m-%d %H:%M:%S')

def readList(fileName):
    reads = set()
    with open(fileName) as fh:
        for line in fh:
            reads.add(line.rstrip())
    logging.info('{} read names hashed'.format(len(reads)))
    return reads

def main(args):
    logging.debug(args)
    reads = readList(args['l'])
    samIn = args['sam']
    if samIn is None:
        stream = sys.stdin
    else:
        stream = open(samIn, 'r')
    i = 0
    for line in stream:
        if line.startswith('@'):
            if args['H']:
                print(line, end='')
            else:
                continue
        rname,rest = line.split('\t',1)
        if args['x']:
            if rname not in reads:
                i += 1
                print(line, end='')
        else:
            if rname in reads:
                i += 1
                print(line, end='')
    logging.info('{} reads extraced'.format(i))
    stream.close()


if __name__ == '__main__':
    from docopt import docopt
    args = docopt(__doc__)
    args = {k.lstrip('-<').rstrip('>'):args[k] for k in args}
    try:
        main(args)
    except KeyboardInterrupt:
        logging.warning('Interrupted')
        sys.exit(1)
