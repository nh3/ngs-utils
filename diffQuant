#!/usr/bin/env Rscript
'Usage: diffQuant [options] <countTable> <sampleTable>

Arguments:
    <countTable>        feature (row) by sample (column) table, first column gives feature names
    <sampleTable>       one sample per row, first column gives sample names that match <countTable>\'s column names

Options:
    -o <file>           output filename prefix [default: ]
    --mincnt <int>      min read count per feature [default: 1]
    --minfrac <float>   min fraction of samples with feature read count under --mincnt [default: 0]
    --factor <str>      factor name [default: strain]
    --ctrl <str>        control level [default: N2]
    --trmt <str>        treatment level, provide a comma separated list if there are multiple levels to test againt control
    --covar <str>       co-variates, provide a comma separated list if there are multiple co-variates
    --pcutoff <float>   p-value cutoff [default: 0.05]
    --fccutoff <float>  fold change cut off [default: 1]
    --qc                make qc plots, require package "dplyr","tidyr","ggplot2","ggrepel","viridis","pheatmap"
    --html              make html report(s), require package "ReportingTools"
    --nCPU <int>        number of CPUs to use, require package "BiocParallel" [default: 1]
' -> doc

suppressWarnings(suppressMessages(library(docopt)))
tryCatch(opts <- docopt(doc, strip_names=F), error=function(e) { message(doc); q() })
names(opts) <- sub('^--?', '', names(opts))
names(opts) <- gsub('[<>]', '', names(opts))

minCnt <- as.integer(opts[['mincnt']])
minFrac <- as.numeric(opts[['minfrac']])
condition <- opts[['factor']]
ctrl <- opts[['ctrl']]
nCPU <- as.integer(opts[['nCPU']])
if (is.null(opts[['covar']])) {
    covar <- NULL
} else {
    covar <- strsplit(opts[['covar']], ',')[[1]]
}
outprefix <- ifelse(is.null(opts[['o']]), '', opts[['o']])
pcutoff <- as.numeric(opts[['pcutoff']])
fccutoff <- as.numeric(opts[['fccutoff']])
outdir <- dirname(paste(outprefix, 'txt', sep='.'))

suppressWarnings(suppressMessages(library(DESeq2)))

export_normCounts <- function(dds, outprefix) {
    outfile <- ifelse(outprefix=='', 'normCounts.txt', sprintf('%s.normCounts.txt', outprefix))
    write.table(as.data.frame(counts(dds, norm=T)), file=outfile, quote=F, sep='\t')
}

export_result <- function(res, dds, outprefix, ctrl, trmt=NULL, doParallel=F, makeHTML=F) {
    if (is.null(trmt)) trmt <- 'all'
    testName <- sprintf('%s-vs-%s', trmt, ctrl)
    cat(testName)
    cat(summary(res, alpha=pcutoff))
    cat('\n')

    resOrdered <- res[order(res$padj),]
    outfile <- ifelse(outprefix=='', sprintf('%s.txt', testName), sprintf('%s.%s.txt', outprefix, testName))
    write.table(as.data.frame(resOrdered), file=outfile, quote=F, sep='\t')
    outpdf <- ifelse(outprefix=='', sprintf('%s.pdf', testName), sprintf('%s.%s.pdf', outprefix, testName))
    pdf(file=outpdf)
    plotMA(res, ylim=c(-3,3), cex=0.8, colNonSig=colalpha('grey32',0.2), colSig='red3')
    dev.off()

    if (makeHTML) {
        outdir <- dirname(outfile)
        dqReport <- HTMLReport(shortName=testName, title=testName, reportDirectory=outdir)
        publish(res, dqReport, DataSet=dds, factor=droplevels(dds$condition), pvalueCutoff=pcutoff, reportDir=outdir)
        finish(dqReport)
    }
}

export_qcPlots <- function(dds, outprefix) {
    suppressWarnings(suppressMessages(library(ggplot2)))

    outfile <- ifelse(outprefix=='', 'diffQC.pdf', sprintf('%s.diffQC.pdf', outprefix))
    vsd <- vst(dds, blind=F)
    pdf(file=outfile)
    plot_expBoxplot(vsd)
    plot_corrHeatmap(vsd)
    plot_pcaPlot(vsd)
    dev.off()
}

plot_expBoxplot <- function(vsd) {
    if (suppressWarnings(suppressMessages(require(dplyr))) &&
            suppressWarnings(suppressMessages(require(tidyr)))) {
        edat <- as.data.frame(assay(vsd)) %>% gather('sample','expression',1:length(vsd$sample)) %>%
                inner_join(data.frame(sample=vsd$sample, condition=vsd$condition))
        print(ggplot(edat, aes(x=sample, y=log2(expression), fill=condition))
                + geom_violin()
                + geom_boxplot(notch=T, fill='white', alpha=0.1)
                + facet_grid(.~condition, scales='free_x', space='free_x')
                + theme(legend.position='top',
                        axis.text.x=element_text(angle=90, hjust=1)))
    }
}

plot_corrHeatmap <- function(vsd) {
    if (suppressWarnings(suppressMessages(require(pheatmap))) &&
            suppressWarnings(suppressMessages(require(viridis)))) {
        cmat <- cor(log1p(assay(vsd)))
        rownames(cmat) <- vsd$sample
        colors <- viridis(255)
        row_annot <- data.frame(condition=vsd$condition)
        rownames(row_annot) <- vsd$sample
        pheatmap(cmat, breaks=seq(0.9,1,length.out=256), show_colnames=F, fontsize=10, col=colors, annotation_row=row_annot)
    }
}

plot_pcaPlot <- function(vsd) {
    if (suppressWarnings(suppressMessages(require(ggrepel)))) {
        pdat <- plotPCA(vsd, intgroup='condition', ntop=2500, returnData=T)
        pctVar <- round(100*attr(pdat, 'percentVar'))
        print(ggplot(pdat, aes(x=PC1, y=PC2, color=condition))
                + geom_point()
                + geom_text_repel(aes(label=name), size=3)
                + xlab(paste0('PC1: ', pctVar[1], '% variance'))
                + ylab(paste0('PC2: ', pctVar[2], '% variance')))
    }
}

dat <- read.delim(opts[['countTable']], header=T, stringsAsFactors=F, check.names=F, comment='#')
colnames(dat) <- as.character(colnames(dat))
mat <- as.matrix(dat[,-1])
rownames(mat) <- as.character(dat[,1])
# force integer input
mat <- round(mat)
mode(mat) <- 'integer'
keep <- (rowSums(mat < minCnt) / ncol(mat)) < minFrac
mat <- mat[keep,]

sdat <- read.delim(opts[['sampleTable']], header=T, stringsAsFactors=F, comment='#')
sdat$sample <- as.character(sdat$sample)
stopifnot(condition %in% colnames(sdat) && ctrl %in% sdat[[condition]])
sdat$condition <- relevel(factor(sdat[[condition]]), ref=ctrl)
stopifnot(all(covar %in% colnames(sdat)))

mat <- mat[,colnames(mat) %in% sdat$sample]

formula_components <- c(covar, 'condition')
dds <- DESeqDataSetFromMatrix(countData=mat, colData=sdat, design=as.formula(paste0('~', paste(formula_components, collapse='+'))))

packs <- rownames(installed.packages())
doParallel <- nCPU > 1 && 'BiocParallel' %in% packs
if (doParallel) {
    suppressWarnings(suppressMessages(library(BiocParallel)))
    register(MulticoreParam(nCPU))
}
makeHTML <- opts[['html']] && 'ReportingTools' %in% packs
if (makeHTML) suppressWarnings(suppressMessages(library(ReportingTools)))

dir.create(outdir, showWarnings=F)

dds <- DESeq(dds, betaPrior=T, parallel=doParallel)
export_normCounts(dds, outprefix)
if (opts[['qc']]) export_qcPlots(dds, outprefix)

if (is.null(opts[['trmt']])) {
    res <- results(dds, lfcThreshold=log2(fccutoff), altHypothesis='greaterAbs', addMLE=F, parallel=doParallel)
    export_result(res, dds, outprefix, ctrl, NULL, doParallel, makeHTML=makeHTML)
} else {
    treatments <- unlist(strsplit(opts[['trmt']], ','))
    for (trmt in treatments) {
        contrast <- c('condition', trmt, ctrl)
        #res <- results(dds, lfcThreshold=log2(fccutoff), altHypothesis='greaterAbs', addMLE=F, parallel=doParallel)
        res <- results(dds, contrast=contrast, addMLE=F, parallel=doParallel)
        k <- sdat$condition %in% c(ctrl, trmt)
        export_result(res, dds[,k], outprefix, ctrl, trmt, doParallel, makeHTML=makeHTML)
    }
}
