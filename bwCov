#!/usr/bin/env python
'''
Extract and calculate coverage stats at a list of locations from bigwigs

Usage: bwCov [-b <bed>] [-w <stepWidth>] [-l <left>] [-r <right>] [-m <mid>] [--ignstr] [--full] <bigwig>...

Options:
    <bigwig>        input BigWig
    -b <bed>        input BED, read from stdin if omitted
    -w <stepWidth>  number of bp per calculated data point
    -l <left>       number of data points to the left [default: 0]
    -r <right>      number of data points to the right [default: 0]
    -m <mid>        number of data points inside the interval [default: 0]
    --ignstr        ignore strand information from the input BED
    --full          print full value table rather than stats (mean,2.5pct,median,97.5pct)
'''

from __future__ import print_function
import sys
import signal
import logging
signal.signal(signal.SIGPIPE, signal.SIG_DFL)
logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s; %(levelname)s; %(funcName)s() %(message)s',
        datefmt='%y-%m-%d %H:%M:%S')
import pyBigWig
import numpy as np
import os.path
import cProfile

class GenomicFeature(object):
    def __init__(self, chrom, start, end, name, strand):
        self.chrom = chrom
        self.start = start
        self.end = end
        self.name = name
        self.size = end - start
        self.strand = strand

class IntervalBoundary(object):
    def __init__(self, chrom, start, end, strand, stepWidth, leftStep, rightStep, midStep=0):
        self.chrom = chrom
        self.leftMid = start
        self.rightMid = end
        self.strand = strand
        self.stepWidth = stepWidth
        self.leftStep = leftStep
        self.rightStep = rightStep
        self.midStep = midStep
        self.leftMost = start - stepWidth*leftStep
        self.rightMost = end + stepWidth*rightStep

    def __str__(self):
        return '{0.chrom}\t{0.leftMost}\t{0.leftMid}\t{0.rightMid}\t{0.rightMost}'.format(self)

    def getCoverage(self, bwData, nLeft, nRight, nMid=0):
        nLeftMid = nLeft + nMid
        x = np.zeros(nLeft+nRight+nMid) * np.nan
        if self.leftStep>0:
            x[(nLeft-self.leftStep):nLeft] = np.nanmean(bwData[self.chrom][self.leftMost:self.leftMid].reshape((self.leftStep,self.stepWidth)), axis=1)
        if nMid>0:
            x[nLeft:nLeftMid] = np.interp(x=np.linspace(self.leftMid, self.rightMid, nMid), xp=np.arange(self.leftMid, self.rightMid), fp=bwData[self.chrom][self.leftMid:self.rightMid])
        if self.rightStep>0:
            x[nLeftMid:(nLeftMid+self.rightStep)] = np.nanmean(bwData[self.chrom][self.rightMid:self.rightMost].reshape((self.rightStep,self.stepWidth)), axis=1)
        return x

def readBed(filename, chromSize, ignoreStrand=False):
    if filename is None:
        stream = sys.stdin
    else:
        stream = open(filename)
    features = []
    for line in stream:
        fields = line.rstrip().split()
        nf = len(fields)
        chrom = fields[0]
        start = int(fields[1])
        end = int(fields[2])
        if nf < 4:
            name = '{0}:{1}-{2}'.format(*fields)
            strand = '+'
        else:
            name = fields[3]
            if nf > 5 and not ignoreStrand:
                strand = fields[5]
            else:
                strand = '+'
        start = min(max(0, start), chromSize[chrom])
        end = min(max(0, end), chromSize[chrom])
        features.append(GenomicFeature(chrom,start,end,name,strand))
    logging.info('done')
    return features

def cacheBW(filename):
    bw = pyBigWig.open(filename)
    chromSize = bw.chroms()
    bwData = {chrom:bw.values(chrom,0,chromSize[chrom],numpy=True) for chrom in chromSize}
    bw.close()
    nMB = sum([bwData[k].nbytes for k in bwData])/1024/1024
    logging.info('{} cached using {}MB of memory'.format(filename, nMB))
    return bwData

def getChromSizeFromBW(filename):
    bw = pyBigWig.open(filename)
    chromSize = bw.chroms()
    bw.close()
    return chromSize

def calcFlankingPositions(features, chromSize, stepWidth, nLeft, nRight=None, nMid=0):
    if nRight is None:
        nRight = nLeft
    intervals = []
    leftMost,leftSize = [],[]
    rightMost,rightSize = [],[]
    for f in features:
        if f.strand == '+':
            pLeft = f.start - stepWidth*nLeft
            mLeft = nLeft
            pRight = f.end + stepWidth*nRight
            mRight = nRight
        else:
            pLeft = f.start - stepWidth*nRight
            mLeft = nRight
            pRight = f.end + stepWidth*nLeft
            mRight = nLeft
        if pLeft < 0:
            mLeft = int(f.start/stepWidth)
        if pRight > chromSize[f.chrom]:
            mRight = int((chromSize[f.chrom]-f.end)/stepWidth)
        if f.size >= stepWidth*nMid:
            pass
        else:
            midStepWidth = f.size / nMid
            if midStepWidth == 0:
                pass
        intervals.append(IntervalBoundary(f.chrom, f.start, f.end, f.strand, stepWidth, mLeft, mRight, nMid))
    logging.info('done')
    return intervals

def extractBigWigValues(bwData, intervals, nLeft, nRight, nMid=0):
    n = len(intervals)
    m = nLeft + nRight + nMid
    data = np.zeros((n,m)) * np.nan
    for i,itv in enumerate(intervals):
        x = itv.getCoverage(bwData, nLeft, nRight, nMid)
        if itv.strand == '+':
            data[i] = x
        else:
            data[i] = x[::-1]
    logging.info('done')
    return data

def writeStats(filename, data, full=False):
    name = os.path.splitext(os.path.basename(filename))[0]
    if full:
        stats = data
    else:
        stats = np.vstack((np.nanmean(data, axis=0),
            np.nanpercentile(data, q=(2.5,50,97.5), interpolation='midpoint', axis=0)))
    n = len(stats)
    nameColumn = np.array([name]*n).reshape(n,1)
    outdat = np.hstack((nameColumn, stats))
    np.savetxt(sys.stdout, outdat, fmt='%s', delimiter='\t')
    return 0


def main(args):
    logging.debug(args)

    bigwigs = args['bigwig']
    inputBed = args['b']
    stepWidth,nLeft,nRight,nMid = int(args['w']),int(args['l']),int(args['r']),int(args['m'])

    chromSize = getChromSizeFromBW(bigwigs[0])
    features = readBed(inputBed, chromSize, ignoreStrand=args['ignstr'])
    intervals = calcFlankingPositions(features, chromSize, stepWidth, nLeft, nRight, nMid)
    n = len(intervals)

    for i,bwFileName in enumerate(bigwigs):
        bwData = cacheBW(bwFileName)
        data = extractBigWigValues(bwData, intervals, nLeft, nRight, nMid)
        writeStats(bwFileName, data, full=args['full'])
    logging.info('all done successfully')
    return 0



if __name__ == '__main__':
    from docopt import docopt
    args = docopt(__doc__)
    args = {k.lstrip('-<').rstrip('>'):args[k] for k in args}
    try:
        main(args)
    except KeyboardInterrupt:
        logging.warning('Interrupted')
        sys.exit(1)
